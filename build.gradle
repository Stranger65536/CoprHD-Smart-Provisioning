buildscript {
    ext {
        springBootVersion = '1.5.8.RELEASE'
        licensePluginVersion = '0.14.0'
    }
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://repo.spring.io/snapshot' }
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'http://repository.pentaho.org/artifactory/repo' }
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:${licensePluginVersion}")
    }
}

project.ext.junitVersion = '4.12'
project.ext.hamcrestVersion = '1.3'
project.ext.jacksonVersion = '2.9.2'
project.ext.springBootVersion = '2.0.0.RELEASE'

allprojects {
    apply plugin: 'java'
    apply plugin: 'findbugs'
    apply plugin: 'com.github.hierynomus.license'

    group 'com.emc'
    version '1.0-SNAPSHOT'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile(
                [group: 'junit', name: 'junit', version: project.junitVersion],
                [group: 'org.hamcrest', name: 'hamcrest-all', version: project.hamcrestVersion],
                [group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: project.springBootVersion]
        )
    }

    license {
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
        header project.rootDir.toPath().resolve('LICENSE').toFile()
        strictCheck true
        ignoreFailures = autofixMissingCopyright
        excludes(['**/*.txt',
                  '**/*.json'])
    }

    findbugs {
        effort = "max"
        reportLevel = "low"
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled false
            html.enabled true
            includeFilter = project.rootDir.toPath().resolve('findbugs').resolve('findbugs-include.xml').toFile()
            excludeFilter = project.rootDir.toPath().resolve('findbugs').resolve('findbugs-exclude.xml').toFile()
        }
    }

    build.dependsOn(licenseFormatMain)
    test.dependsOn(licenseFormatTest)
}

apply plugin: 'org.springframework.boot'

configurations {
    all*.exclude module: 'spring-boot-starter-logging'
    all*.exclude group: 'javax.servlet', module: 'servlet-api'
    all*.exclude group: 'org.hibernate', module: 'hibernate-validator'
    providedRuntime
}

bootRun {
    //noinspection GroovyAssignabilityCheck
    systemProperties = System.properties
}

test {
    //noinspection GroovyAssignabilityCheck
    systemProperties = System.properties
}

dependencies {
    compile(
            [group: 'org.springframework.boot', name: 'spring-boot-starter', version: project.springBootVersion],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-log4j2', version: project.springBootVersion],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-web-services', version: project.springBootVersion],

            [group: 'commons-logging', name: 'commons-logging', version: '1.2'],
            [group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: project.jacksonVersion],
    )
    runtimeOnly(
            [group: 'org.springframework.boot', name: 'spring-boot-starter-tomcat', version: project.springBootVersion],
    )
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
}